package main

type Particle struct {
	m      Vector  // magnetization
	u      Vector  // anisotropy direction (normalized)
	size   float64 // radius
	center Vector  // particle position
}

// Field generated by this particle at position x
func (p *Particle) FieldAt(x Vector) {

	volume := 4. / 3 * math.Pi * cube(p.size)

	R := p.center.Sub(x)
	r := R.Len()
	r2 := r * r
	r3 := r * r2
	r5 := r3 * r2

	dotproduct := p.m.dot(R)

	Bx := msat * volume * prefactor * ((3 * dotproduct * r_vect[X] / r5) - (p.m[X] / r3))
	By := msat * volume * prefactor * ((3 * dotproduct * r_vect[Y] / r5) - (p.m[Y] / r3))
	Bz := msat * volume * prefactor * ((3 * dotproduct * r_vect[Z] / r5) - (p.m[Z] / r3))

	return Vector{Bx, By, Bz}
}
